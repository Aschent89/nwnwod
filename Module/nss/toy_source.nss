#include "bdsm_controls"
//MadRabbits BDSM Toys

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////CONSTANTS//////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//These are the tags of the different items
//Leash
const string BDSM_LEASH = "mr_toy_1";
//Shackle
const string BDSM_SHACKLE = "mr_toy_2";
//Gag
const string BDSM_GAG= "mr_toy_3";
//Rope
const string BDSM_ROPE = "mr_toy_4";
//Bell
const string BDSM_BELL = "mr_toy_5";
//Blindfold
const string BDSM_BLINDFOLD = "mr_toy_6";
//Hood
const string BDSM_HOOD = "mr_toy_7";
//WristCuff
const string BDSM_WRIST_CUFF = "mr_toy_8";
//Foot Cuff
const string BDSM_FOOT_CUFF = "mr_toy_9";
//CockSheath
const string BDSM_SHEATH = "mr_toy_11";
//Nipple Clamps
const string BDSM_CLAMPS = "mr_toy_12";
//Chastity Belt
const string BDSM_CHASTITY = "mr_toy_13";
//Butt Plug
const string BDSM_TAIL_BUTTPLUG = "mr_toy_14";
//StrapOn
const string BDSM_STRAPON = "mr_toy_15";
//Thigh Cuffs
const string BDSM_THIGH_CUFF = "mr_toy_16";
//NudeModelItem
const string BDSM_NUDE_MODEL = "mr_toy_17";
//Butt Plug
const string BDSM_BUTTPLUG = "mr_toy_18";
//Tickle Feather
const string BDSM_FEATHER = "mr_toy_19";
//Dildo
const string BDSM_DILDO = "mr_toy_20";
//Anal Probe
const string BDSM_RIBBED_ANAL_PROBE = "mr_toy_21";
//Whip
const string BDSM_WHIP = "mr_whip";

//Effect generator
const string BDSM_CONTROL = "mr_bdsm_control";

//Resref and Tag of the Hood
const string BDSM_BLACK_HOOD = "mr_black_hood";

//Resref and tag of Nude Costume
const string BDSM_NUDE_COSTUME = "mr_nude_c";

//Tag of the black collars
const string BLANK_COLLAR_TAG = "mr_toy_b_collar";

//Resref of the Slave Collar
const string COLLAR_RESREF = "mr_collar";

//Resref of the Leashs
const string LEASH_RESREF = "mr_leash";

//Prefics for the tags of the Leash and Collar
const string LEASH_PREFIX = "mr_toy_l_";
const string COLLAR_PREFIX = "mr_toy_c_";

//Waypoint to be placed in the module core
const string BDSM_CORE_WAYPOINT = "mr_core_waypoint";


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////DECLARATIONS////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//Dupe of the ApplyEffectToObject command to be assigned to the toy generator
void ToyApplyEffect(object oTarget, effect eEffect);

//Clears nType of Effect off oTarget. Only clears effects generated by the toy
//scripts
void ToyClearEffect(object oTarget, int nType, int nType2 = 0);

//This function handles all the on activate code
void ToyOnActivate (object oActivator, object oTarget, object oItem);

//Returns TRUE if oWeapon is a valid weapon or shield.
//Returns FALSE if its not.
int ToyCheckForValidWeaponShield(object oWeapon);

//Handles all the OnEquip code
void ToyOnEquip(object oItemEquipper, object oItemEquipped);

//Handles all the OnUnEquipCode
void ToyOnUnEquip(object oItemUnEquipper, object oItemUnEquipped);

//Stops the slave from sitting if they are not permitted by the collar.
void ToyStopSit(object oSitter);




////////////////////////////////////////////////////////////////////////////////
////////////////////////////////IMPLENTATIONS////////////////////////////////////\
////////////////////////////////////////////////////////////////////////////////

void SlaveCollarEmote(object oPC, object oItem)
{
    //Get the Master's Name off the Collar Name)
    string sName = GetName(oItem);
    int nLength = GetStringLength(sName);
    int nSegment = nLength - 15;
    string sMasterName = GetStringLeft(sName, nSegment);
    string sSlaveName = GetName(oPC);

    //Speak the emote
    AssignCommand(oPC, SpeakString("The collar around the neck of " + sSlaveName + " has the name " + sMasterName + " engraved in the metal."));
}

void CollarLeashActivate(object oPC, string sTag, object oItem)
{
    //Get the ID off the leash and find the collar
    string sID = GetStringRight(sTag, 16);
    string sCollarTag = COLLAR_PREFIX + sID;
    object oCollar = GetObjectByTag(sCollarTag);

    //If the collar isnt a valid object, inform the player and end
    if(!GetIsObjectValid(oCollar)) {
        FloatingTextStringOnCreature("The slave associated with this collar is unavailable!", oPC, FALSE);
        return; }

    //Otherwise set the variables and start the conversation
    object oSlave = GetItemPossessor(oCollar);
    SetLocalObject(oPC, "MR_COLLAR_SLAVE", oSlave);
    SetLocalObject(oPC, "MR_COLLAR_LEASH", oItem);
    SetLocalObject(oPC, "MR_COLLAR_COLLAR", oCollar);
    AssignCommand(oPC, ActionStartConversation(oPC, "mr_leash", TRUE, FALSE));
}

//Returns TRUE if they have a slave collar
int SearchForCollar(object oPC)
{
    object oItem;
    string sTag;

    oItem = GetItemInSlot(INVENTORY_SLOT_NECK, oPC);

    if (GetIsObjectValid(oItem)) {
        sTag = GetTag(oItem);
        if (GetStringLeft(sTag, 9) == COLLAR_PREFIX) return TRUE; }

    oItem = GetFirstItemInInventory(oPC);

    while (GetIsObjectValid(oItem)) {
        sTag = GetTag(oItem);
        if (GetStringLeft(sTag, 9) == COLLAR_PREFIX) return TRUE;
        oItem = GetNextItemInInventory(oPC); }

    return FALSE;
}

void ClearToyData(object oPC)
{
    DeleteLocalString(oPC, "MR_TOY_TAG");
    DeleteLocalString(oPC, "MR_TOY_NAME");
    DeleteLocalObject(oPC, "MR_TOY_OWNER");
}

int GetIsPCMaster(object oPC, object oSlave)
{
    string sSlaveCD = GetPCPublicCDKey(oSlave, TRUE);
    string sDomCD = GetPCPublicCDKey(oPC, TRUE);
    string sID = sSlaveCD + sDomCD;
    string sCollarTag = COLLAR_PREFIX + sID;

    object oCollar = GetItemPossessedBy(oSlave, sCollarTag);

    if (GetIsObjectValid(oCollar)) return TRUE;
    return FALSE;
}


void ToyOnActivate (object oActivator, object oTarget, object oItem)
{
    //Define the major variables needed
    string sToyTag = GetTag(oItem);
    string sToyName = GetName(oItem);
    int nToyInUse = GetLocalInt(oTarget, sToyTag);

    //If its a dm wand, check for a collar, then execute script if they have
    //one
    if (sToyTag == "mr_toy_dm") {
        if (!GetIsDM(oActivator)) {
            FloatingTextStringOnCreature("Only a DM may use this wand", oActivator, FALSE);
            return; }
        if (!GetIsPC(oTarget)) {
            FloatingTextStringOnCreature("You must target a valid player.", oActivator, FALSE);
            return; }
        if (!SearchForCollar(oTarget)) {
            FloatingTextStringOnCreature("The target is not wearing a slave collar", oActivator, FALSE);
            return; }
        ExecuteScript("collar_dm", oTarget); }



    //If its a slave collar, speak the emote and end
    if (GetStringLeft(sToyTag, 9) == COLLAR_PREFIX) {
        SlaveCollarEmote(oActivator, oItem);
        return; }

    //If its a slave leash, activate the conversation
    if (GetStringLeft(sToyTag, 9) == LEASH_PREFIX) {
        CollarLeashActivate(oActivator, sToyTag, oItem);
        return; }

     //Store the tag and the name of the item so the conversation can
     //know what to do as well as the player using the toy on them
     SetLocalString(oTarget, "MR_TOY_TAG", sToyTag);
     SetLocalString(oTarget, "MR_TOY_NAME", sToyName);
     SetLocalObject(oTarget, "MR_TOY_OWNER", oActivator);

    //If its a blank collar, start the consent conversation and end
    if (sToyTag == BLANK_COLLAR_TAG) {
        //If they have a slave collar, then cant collar them
        if (SearchForCollar(oTarget)) {
            FloatingTextStringOnCreature("This slave is already collared!", oActivator, FALSE);
            ClearToyData(oTarget);
            return; }

        AssignCommand(oTarget, ActionStartConversation(oTarget, "mr_col_consent", TRUE, FALSE));
        SetLocalObject(oTarget, "MR_COLLAR", oItem);
        return; }

    //If the target does not have toy in effect on them, start the conversation.
    if (!nToyInUse) {
        //If its an emote item, just do the emote.
        string sMasterName = GetName(oActivator);
        string sSlaveName = GetName(oTarget);

        if (sToyTag == BDSM_BUTTPLUG) {
            AssignCommand(oActivator, ActionSpeakString(sMasterName + " pushes a butt plug into the behind of " + sSlaveName));
            PlayVoiceChat(VOICE_CHAT_PAIN1, oTarget);
            SetLocalInt(oTarget, sToyTag, 1);
            ClearToyData(oTarget);
            return;}
        if (sToyTag == BDSM_FEATHER) {
            AssignCommand(oActivator, ActionSpeakString(sMasterName + " tickles " + sSlaveName + " with a feather."));
            PlayVoiceChat(VOICE_CHAT_LAUGH, oTarget);
            ClearToyData(oTarget);
            return;}
        if (sToyTag == BDSM_DILDO) {
            AssignCommand(oActivator, ActionSpeakString(sMasterName + " thrusts a dildo between the legs of " + sSlaveName));
            PlayVoiceChat(VOICE_CHAT_PAIN1, oTarget);
            ClearToyData(oTarget);
            return;}
        if (sToyTag == BDSM_RIBBED_ANAL_PROBE) {
            AssignCommand(oActivator, ActionSpeakString(sMasterName + " thrusts a ribbed anal probe into the ass of " + sSlaveName));
            PlayVoiceChat(VOICE_CHAT_PAIN2, oTarget);
            ClearToyData(oTarget);
            return;}

        //Cant use a blindfold and a hood at the same time
        if (sToyTag == BDSM_BLINDFOLD && GetLocalInt(oTarget, BDSM_HOOD)) {
            FloatingTextStringOnCreature("You cannot use this toy because the player already has a hood on!", oActivator, FALSE);
            ClearToyData(oTarget);
            return; }
        if (sToyTag == BDSM_HOOD && GetLocalInt(oTarget, BDSM_BLINDFOLD)) {
            FloatingTextStringOnCreature("You cannot use this toy because the player already has a blindfold on!", oActivator, FALSE);
            ClearToyData(oTarget);
            return; }

        //If the controls have been set to disable the consent conversations,
        //just execute the script
        if (CONSENT_CONVERSATIONS_OFF == 1) {
            ExecuteScript(sToyTag, oTarget);
            return; }
        //If the target is the activators slave, execeute script without consent
        if (GetIsPCMaster(oActivator, oTarget)) {
            ExecuteScript(sToyTag, oTarget);
            return; }
        //Start the conversations.
        AssignCommand(oTarget, ActionStartConversation(oTarget, "mr_toy_consent", TRUE, FALSE)); }

    //If its the nude costume item and the player is wearing the nude
    //costume and they are not flagged as having the toy in use, go ahead
    //and execute the script to stop bugs
    object oChest = GetItemInSlot(INVENTORY_SLOT_CHEST, oTarget);
    if (!nToyInUse && sToyTag == BDSM_NUDE_MODEL && GetTag(oChest) == BDSM_NUDE_COSTUME) {
        ExecuteScript(sToyTag, oTarget); }

    //If the target has the toy in use on them, execute the script
    if (nToyInUse) {
        //If its an emote item, just do the emote.
        string sMasterName = GetName(oActivator);
        string sSlaveName = GetName(oActivator);

        if (sToyTag == BDSM_BUTTPLUG) {
            AssignCommand(oActivator, ActionSpeakString(sMasterName + " removes a butt plug from the behind of " + sSlaveName));
            PlayVoiceChat(VOICE_CHAT_PAIN2, oTarget);
            DeleteLocalInt(oTarget, sToyTag);
            ClearToyData(oTarget);
            return;}

        ExecuteScript(sToyTag, oTarget); }
}

void ToyApplyEffect(object oTarget, effect eEffect)
{
    effect eNewEffect;

    if (TOY_EFFECTS_SUBTYPE == SUBTYPE_SUPERNATURAL)
        eNewEffect = SupernaturalEffect(eEffect);

    if (TOY_EFFECTS_SUBTYPE == SUBTYPE_EXTRAORDINARY)
        eNewEffect = ExtraordinaryEffect(eEffect);

    if (TOY_EFFECTS_SUBTYPE == SUBTYPE_MAGICAL)
        eNewEffect = eEffect;

    AssignCommand(oTarget, ApplyEffectToObject(DURATION_TYPE_PERMANENT, eNewEffect, oTarget));
}

void ToyClearEffect(object oTarget, int nType, int nType2 = 0)
{
    effect eEffect;
    eEffect = GetFirstEffect(oTarget);
    int nEffectType;
    int nSubType;
    object oCreator;

    while (GetIsEffectValid(eEffect)) {
        nSubType = GetEffectSubType(eEffect);
        oCreator = GetEffectCreator(eEffect);
        if (nSubType == TOY_EFFECTS_SUBTYPE && oCreator == oTarget) {
            nEffectType = GetEffectType(eEffect);
            if (nEffectType == nType) RemoveEffect(oTarget, eEffect);
            if (nType2 != 0) {
                if (nEffectType == nType2) RemoveEffect(oTarget, eEffect); } }
    eEffect = GetNextEffect(oTarget); }
}

int ToyCheckForValidWeaponShield(object oWeapon)
{
    int nReturn = FALSE;

    switch (GetBaseItemType(oWeapon)) {
        case BASE_ITEM_BASTARDSWORD : nReturn = TRUE; break;
        case BASE_ITEM_BATTLEAXE : nReturn = TRUE; break;
        case BASE_ITEM_CLUB : nReturn = TRUE; break;
        case BASE_ITEM_DAGGER : nReturn = TRUE; break;
        case BASE_ITEM_DART : nReturn = TRUE; break;
        case BASE_ITEM_DIREMACE : nReturn = TRUE; break;
        case BASE_ITEM_DOUBLEAXE : nReturn = TRUE; break;
        case BASE_ITEM_DWARVENWARAXE : nReturn = TRUE; break;
        case BASE_ITEM_GREATAXE : nReturn = TRUE; break;
        case BASE_ITEM_GREATSWORD : nReturn = TRUE; break;
        case BASE_ITEM_GRENADE : nReturn = TRUE; break;
        case BASE_ITEM_HALBERD : nReturn = TRUE; break;
        case BASE_ITEM_HANDAXE : nReturn = TRUE; break;
        case BASE_ITEM_HEAVYCROSSBOW : nReturn = TRUE; break;
        case BASE_ITEM_HEAVYFLAIL : nReturn = TRUE; break;
        case BASE_ITEM_KAMA : nReturn = TRUE; break;
        case BASE_ITEM_KATANA : nReturn = TRUE; break;
        case BASE_ITEM_KUKRI : nReturn = TRUE; break;
        case BASE_ITEM_LARGESHIELD : nReturn = TRUE; break;
        case BASE_ITEM_LIGHTCROSSBOW : nReturn = TRUE; break;
        case BASE_ITEM_LIGHTFLAIL : nReturn = TRUE; break;
        case BASE_ITEM_LIGHTHAMMER : nReturn = TRUE; break;
        case BASE_ITEM_LIGHTMACE : nReturn = TRUE; break;
        case BASE_ITEM_LONGBOW : nReturn = TRUE; break;
        case BASE_ITEM_LONGSWORD : nReturn = TRUE; break;
        case BASE_ITEM_MAGICSTAFF : nReturn = TRUE; break;
        case BASE_ITEM_MORNINGSTAR : nReturn = TRUE; break;
        case BASE_ITEM_QUARTERSTAFF : nReturn = TRUE; break;
        case BASE_ITEM_RAPIER : nReturn = TRUE; break;
        case BASE_ITEM_SCIMITAR : nReturn = TRUE; break;
        case BASE_ITEM_SCYTHE : nReturn = TRUE; break;
        case BASE_ITEM_SHORTBOW : nReturn = TRUE; break;
        case BASE_ITEM_SHORTSPEAR : nReturn = TRUE; break;
        case BASE_ITEM_SHORTSWORD : nReturn = TRUE; break;
        case BASE_ITEM_SHURIKEN : nReturn = TRUE; break;
        case BASE_ITEM_SICKLE : nReturn = TRUE; break;
        case BASE_ITEM_SLING : nReturn = TRUE; break;
        case BASE_ITEM_SMALLSHIELD : nReturn = TRUE; break;
        case BASE_ITEM_THROWINGAXE : nReturn = TRUE; break;
        case BASE_ITEM_TOWERSHIELD : nReturn = TRUE; break;
        case BASE_ITEM_TRIDENT : nReturn = TRUE; break;
        case BASE_ITEM_TWOBLADEDSWORD : nReturn = TRUE; break;
        case BASE_ITEM_WARHAMMER : nReturn = TRUE; break;
        case BASE_ITEM_WHIP : nReturn = TRUE; break; }

    return nReturn;
}

void ToyShockSlave(object oSlave)
{
    int nDamage = d4(COLLAR_DAMAGE_MULTIPLIER);
    effect eVisual = EffectVisualEffect(VFX_IMP_HEAD_ELECTRICITY);
    effect eDamage = EffectDamage(nDamage);
    effect eLink = EffectLinkEffects(eVisual, eDamage);
    FloatingTextStringOnCreature("The collar shocks you!", oSlave, FALSE);
    ApplyEffectToObject(DURATION_TYPE_INSTANT, eLink, oSlave);
}

void ToyOnEquip(object oItemEquipper, object oItemEquipped)
{
    int nShackle = GetLocalInt(oItemEquipper, BDSM_SHACKLE);
    int nCollar = GetLocalInt(oItemEquipper, "COLLAR_NO_WEAPONS");

    //If the player is not in shackles and not flagged by the collar, do nothing.
    if (!nShackle && !nCollar) return;

    //Check to see if the item is a valid weapon or shield
    if (!ToyCheckForValidWeaponShield(oItemEquipped)) return;

    string sMessage;
    sMessage = "You cannot equip weapons or shields while in shackles";

    //Collar overrides the shackles
    if (nCollar) {
        sMessage = "Your collar comes to life, shocking you as you touch the weapons.";
        if (COLLAR_DAMAGE_ON){
            ToyShockSlave(oItemEquipper); }}

    FloatingTextStringOnCreature(sMessage, oItemEquipper, FALSE);
    DelayCommand(0.7, AssignCommand(oItemEquipper, ActionUnequipItem(oItemEquipped)));
}

void ToyOnUnEquip(object oItemUnEquipper, object oItemUnEquipped)
{
    string sTag = GetTag(oItemUnEquipped);

    if (sTag == BDSM_BLACK_HOOD && GetLocalInt(oItemUnEquipper, BDSM_HOOD) && BLACK_HOOD_UNEQUIPPABLE) {
        FloatingTextStringOnCreature("You cannot remove the hood until your dominate allows it!", oItemUnEquipper, FALSE);
        object oNewHood = GetItemInSlot(INVENTORY_SLOT_HEAD, oItemUnEquipper);
        if (GetIsObjectValid(oNewHood)) DelayCommand(0.5, AssignCommand(oItemUnEquipper, ActionUnequipItem(oNewHood)));
        DelayCommand(0.9, AssignCommand(oItemUnEquipper, ActionEquipItem(oItemUnEquipped, INVENTORY_SLOT_HEAD))); }

    if (GetStringLeft(sTag, 9) == COLLAR_PREFIX && COLLAR_UNEQUIPABLE) {
        if (GetLocalInt(oItemUnEquipper, "MR_COLLAR_OFF")) return;
        FloatingTextStringOnCreature("You cannot remove the collar until your master allows it!", oItemUnEquipper, FALSE);
        if (COLLAR_DAMAGE_ON)
            ToyShockSlave(oItemUnEquipper);
        object oNewNeck = GetItemInSlot(INVENTORY_SLOT_NECK, oItemUnEquipper);
        if (GetIsObjectValid(oNewNeck)) DelayCommand(0.5, AssignCommand(oItemUnEquipper, ActionUnequipItem(oNewNeck)));
        DelayCommand(0.9, AssignCommand(oItemUnEquipper, ActionEquipItem(oItemUnEquipped, INVENTORY_SLOT_NECK))); }

}

//Returns the slave collar of oPC if they have a slave collar. Returns
//OBJECT_INVALID on error
object FindCollar(object oPC)
{
    object oItem = GetFirstItemInInventory(oPC);
    string sTag;

    while (GetIsObjectValid(oItem)) {
        sTag = GetTag(oItem);
        if (GetStringLeft(sTag, 9) == COLLAR_PREFIX) return oItem;
        oItem = GetNextItemInInventory(oPC); }

    return OBJECT_INVALID;
}

void ToyOnClientEnter(object oEnteringClient)
{
    if (GetLocalInt(oEnteringClient, "MR_COLLAR_OFF")) return;
    object oCollar = FindCollar(oEnteringClient);
    object oItemOnNeck = GetItemInSlot(INVENTORY_SLOT_NECK, oEnteringClient);

    //If the entering client has a slave collar, are not wearing it and
    //unequippable collars is turned on, then unequip the neck item and equip
    //the collar.
    if (GetIsObjectValid(oCollar) && oItemOnNeck != oCollar && COLLAR_UNEQUIPABLE) {
        AssignCommand(oEnteringClient, ActionUnequipItem(oItemOnNeck));
        DelayCommand(0.5, AssignCommand(oEnteringClient, ActionEquipItem(oCollar, INVENTORY_SLOT_NECK))); }
}

void ToyStopSit(object oSitter)
{
    //Stop them from sitting.
    AssignCommand(oSitter, ClearAllActions());

    //Send the message
    FloatingTextStringOnCreature("Your collar begins to glow as you attempt to sit on the furniture!", oSitter, FALSE);

    //Shock them
    if (COLLAR_DAMAGE_ON)
        ToyShockSlave(oSitter);
}

void AddSlaveCollar(object oClothing, object oSlave)
{
    //Determine the appearance number to use.
    int nAppearance;
    switch (GetGender(oSlave)) {
        case GENDER_FEMALE: nAppearance = BDSM_NUMBER_COLLAR_F; break;
        case GENDER_MALE: nAppearance = BDSM_NUMBER_COLLAR_M; break; }

    //Altar the curent clothing
    object oNewClothing = CopyItemAndModify(oClothing, ITEM_APPR_TYPE_ARMOR_MODEL, ITEM_APPR_ARMOR_MODEL_NECK, nAppearance);

    // Destroy the orginal and equip the new clothing.
    DestroyObject(oClothing);
    DelayCommand(1.0, AssignCommand(oSlave, ActionEquipItem(oNewClothing, INVENTORY_SLOT_CHEST)));
}






